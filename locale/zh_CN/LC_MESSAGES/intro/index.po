# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The Zeek Project
# This file is distributed under the same license as the Zeek package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Zeek source\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-28 21:33+0800\n"
"PO-Revision-Date: 2020-11-01 10:25+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: Loong Chen <loong.chen@foxmail.com>\n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 2.4.1\n"

#: ../../intro/index.rst:4
msgid "Introduction"
msgstr "介绍"

#: ../../intro/index.rst:7
msgid "Overview"
msgstr "概览"

#: ../../intro/index.rst:9
msgid ""
"Zeek is a passive, open-source network traffic analyzer. It is primarily a "
"security monitor that inspects all traffic on a link in depth for signs of "
"suspicious activity. More generally, however, Zeek supports a wide range "
"of traffic analysis tasks even outside of the security domain, including "
"performance measurements and helping with trouble-shooting."
msgstr ""
"Zeek是一个开源的、被动网络流量分析软件。它主要被用作安全监测设备来检查链路"
"上的所有流量中是否有恶意活动的痕迹。但更普遍地，Zeek支持大量安全领域外的流"
"量分析任务，包括性能测量和帮助排查问题。"

#: ../../intro/index.rst:16
msgid ""
"The most immediate benefit that a site gains from deploying Zeek is an "
"extensive set of *log files* that record a network's activity in high-"
"level terms. These logs include not only a comprehensive record of every "
"connection seen on the wire, but also application-layer transcripts such "
"as, e.g., all HTTP sessions with their requested URIs, key headers, MIME "
"types, and server responses; DNS requests with replies; SSL certificates; "
"key content of SMTP sessions; and much more. By default, Zeek writes all "
"this information into well-structured tab-separated log files suitable for "
"post-processing with external software. Users can however also chose from "
"a set of alternative output formats and backends to interface directly "
"with, e.g., external databases."
msgstr ""
"在一个地方部署Zeek，将会得到大量不同类型的*日志文件*，它们详细记录了当前网"
"络中的活动信息。这些日志不仅包含了当前网络中每一个连接的详细记录，而且还包"
"含了应用层信息，比如，所有的HTTP会话以及他们的请求URI、关键头部字段、MIME类"
"型和服务器响应；DNS请求和响应；SSL证书；SMTP会话的关键信息；诸如此类。默认"
"情况下，Zeek把这些信息写入以tab分隔的日志文件中以便其它软件进行后续的处理。"
"但用户也可以选择其它的输出格式和后端存储，比如数据库。"

#: ../../intro/index.rst:29
msgid ""
"In addition to the logs, Zeek comes with built-in functionality for a "
"range of analysis and detection tasks, including extracting files from "
"HTTP sessions, detecting malware by interfacing to external registries, "
"reporting vulnerable versions of software seen on the network, identifying "
"popular web applications, detecting SSH brute-forcing, validating SSL "
"certificate chains, and much more."
msgstr ""
"除了日志外，Zeek还内置了许多用于一系列分析和检测任务的功能，包括从HTTP会话"
"中提取文件，通过外部接口检测恶意软件，报告网络上看到的易受攻击的软件版本，"
"识别流行的web应用，检测SSH爆破，验证SSL证书链，等等。"

#: ../../intro/index.rst:36
msgid ""
"However, the key to understanding Zeek lies in realizing that even though "
"the system comes with such powerful functionality out of the box, "
"fundamentally it represents a *platform* for traffic analyses that's fully "
"customizable and extensible: Zeek provides users with a domain-specific, "
"Turing-complete *scripting language* for expressing arbitrary analysis "
"tasks. Conceptually, you can think of Zeek as a \"domain-specific Python"
"\" (or Perl): just like Python, the system comes with a large set of pre-"
"built functionality (the \"standard library\"), yet you are not limited to "
"what the system ships with but can put Zeek to use in novel ways by "
"writing your own code. Indeed, all of Zeek's default analyses, including "
"all the logging, is the result of such scripts; there's no specific "
"analysis hard-coded into the core of system."
msgstr ""
"但是，理解Zeek的关键在于意识到即使系统已经内置了如此强大的功能，它本质上还"
"是一个用于流量分析的完全可自定义、可修改的*平台*：Zeek提供给用户一种特定领"
"域的、图灵完全的*脚本语言*用于表达任意的分析任务。概念上，你可以认为Zeek"
"是“特定领域的Python”（或者Perl）：就像Python一样，系统内置了大量的功能（“标"
"准库”），但你并没有被局限于系统附带的功能，而是可以通过编写你自己的代码来使"
"用Zeek。事实上，所有Zeek的默认分析，包括所有的日志记录，是这些脚本的结果；"
"没有硬编码的特定分析在系统的核心代码中。"

#: ../../intro/index.rst:50
msgid ""
"Zeek runs on commodity hardware and hence provides a low-cost alternative "
"to expensive proprietary solutions. Despite the price tag, however, Zeek "
"actually goes far beyond the capabilities of other network monitoring "
"tools, which typically remain limited to a small set of hard-coded "
"analysis tasks. We emphasize in particular that Zeek is *not* a classic "
"signature-based intrusion detection system (IDS). While it supports such "
"standard functionality as well, Zeek's scripting language indeed "
"facilitates a much broader spectrum of very different approaches to "
"finding malicious activity, including semantic misuse detection, anomaly "
"detection, and behavioral analysis."
msgstr ""
"Zeek可以运行在标准硬件上，因此提供了相对于昂贵的专有方案的低成本替代方案。"
"除了价格外，Zeek在能力方面也远远地走在了其它网络监测工具的前面，它们始终都"
"只能执行一些硬编码的分析任务。我们尤其要强调Zeek并不是传统意义上的基于特征"
"的入侵检测系统（IDS）。尽管它确实支持这样的功能，但Zeek的脚本语言实际上极大"
"地 丰富了寻找恶意活动的方法，包括语义误用、异常检测以及行为分析。"

#: ../../intro/index.rst:61
msgid ""
"A large variety of sites deploy Zeek operationally for protecting their "
"cyberinfrastructure, including many universities, research labs, "
"supercomputing centers, open-science communities, and major corporations. "
"Zeek specifically targets high-speed, high-volume network monitoring, and "
"an increasing number of sites are now using the system to monitor their "
"10GE networks, with some already moving on to 100GE links. Zeek "
"accommodates such high-performance settings by supporting scalable load-"
"balancing: large sites typically run \"Zeek Clusters\" in which a high-"
"speed frontend load-balancer distributes the traffic across an appropriate "
"number of backend PCs, all running dedicated Zeek instances on their "
"individual traffic slices. A central manager system coordinates the "
"process, synchronizing state across the backends and providing the "
"operators with a central management interface for configuration and access "
"to aggregated logs. Zeek's integrated management framework, ZeekControl, "
"supports such cluster setups out-of-the-box."
msgstr ""
"许多地方部署Zeek是为了保护它们的网络基础设施，包括许多大学、研究机构、超算"
"中心、开放科学组织以及大公司。Zeek主要关注于高速率、大流量的网络监测，而且"
"越来越多的地方正在使用系统来监测它们的10GE网络，其中一些甚至已经开始使用"
"100GE的链路。Zeek通过可扩展的负载均衡来达到如此高的性能：这些地方通常运"
"行“Zeek集群”——一个高速率的前端负载均衡设备分发流量到多个后端PC，每个PC运行"
"Zeek实例来分析它们那份流量。中央管理系统负责协调进程，在后端之间同步状态以"
"及向操作人员提供一个中央管理界面用配置和查看聚合后的日志。Zeek的管理框架——"
"ZeekControl——支持开箱即用的集群配置。"

#: ../../intro/index.rst:79
msgid "Features"
msgstr "特性"

#: ../../intro/index.rst:81
msgid ""
"Zeek supports a wide range of analyses through its scripting language. Yet "
"even without further customization it comes with a powerful set of "
"features."
msgstr ""
"Zeek通过它的脚本语言支持一系列的分析。然而即使不做修改它也自带了一整套功"
"能。"

#: ../../intro/index.rst:85
msgid "Deployment"
msgstr "部署"

#: ../../intro/index.rst:87
msgid ""
"Runs on commodity hardware on standard UNIX-style systems (including "
"Linux, FreeBSD, and MacOS)."
msgstr "运行在标准硬件上的类Unix系统中（包括Linux、FreeBSD和MacOS）。"

#: ../../intro/index.rst:90
msgid "Fully passive traffic analysis off a network tap or monitoring port."
msgstr "连接网络分流器或者监控端口的完全被动式的分析。"

#: ../../intro/index.rst:93
msgid "Standard libpcap interface for capturing packets."
msgstr "使用标准的libpcap接口用于捕获数据包。"

#: ../../intro/index.rst:95
msgid "Real-time and offline analysis."
msgstr "实时和离线分析。"

#: ../../intro/index.rst:97
msgid "Cluster-support for large-scale deployments."
msgstr "对于大规模部署的集群支持。"

#: ../../intro/index.rst:99
msgid ""
"Unified management framework for operating both standalone and cluster "
"setups."
msgstr "对于单独和集群部署的统一管理框架。"

#: ../../intro/index.rst:102
msgid "Open-source under a BSD license."
msgstr "使用BSD开源协议。"

#: ../../intro/index.rst:104
msgid "Analysis"
msgstr "分析"

#: ../../intro/index.rst:106
msgid "Comprehensive logging of activity for offline analysis and forensics."
msgstr "用于离线分析和取证的全面的活动日志。"

#: ../../intro/index.rst:109
msgid "Port-independent analysis of application-layer protocols."
msgstr "端口无关的应用层协议分析。"

#: ../../intro/index.rst:111
msgid ""
"Support for many application-layer protocols (including DNS, FTP, HTTP, "
"IRC, SMTP, SSH, SSL)."
msgstr "支持许多应用层协议（包括DNS、FTP、HTTP、IRC、SMTP、SSH、SSL）。"

#: ../../intro/index.rst:114
msgid ""
"Analysis of file content exchanged over application-layer protocols, "
"including MD5/SHA1 computation for fingerprinting."
msgstr "通过应用层协议传输的文件内容分析，包括MD5/SHA1指纹计算。"

#: ../../intro/index.rst:117
msgid "Comprehensive IPv6 support."
msgstr "全面的IPv6支持。"

#: ../../intro/index.rst:119
msgid ""
"Tunnel detection and analysis (including Ayiya, Teredo, GTPv1). Zeek "
"decapsulates the tunnels and then proceeds to analyze their content as if "
"no tunnel was in place."
msgstr ""
"隧道检测和分析（包括Ayiya、Teredo、GTPv1）。Zeek解开隧道的封装然后继续分析"
"它们的内容，就好像没有隧道一样。"

#: ../../intro/index.rst:123
msgid "Extensive sanity checks during protocol analysis."
msgstr "协议分析过程中广泛的完整性检查。"

#: ../../intro/index.rst:125
msgid "Support for IDS-style pattern matching."
msgstr "支持IDS形式的模式匹配。"

#: ../../intro/index.rst:127
msgid "Scripting Language"
msgstr "脚本语言"

#: ../../intro/index.rst:129
msgid "Turing-complete language for expression arbitrary analysis tasks."
msgstr "能够表达任意分析任务的图灵完全语言。"

#: ../../intro/index.rst:132
msgid "Event-based programming model."
msgstr "基于事件的编程模型。"

#: ../../intro/index.rst:134
msgid ""
"Domain-specific data types such as IP addresses (transparently handling "
"both IPv4 and IPv6), port numbers, and timers."
msgstr ""
"特地领域的数据类型，比如IP地址（透明地处理IPv4和IPv6）、端口和计时器。"

#: ../../intro/index.rst:137
msgid "Extensive support for tracking and managing network state over time."
msgstr "广泛支持跟踪和管理随着时间变化的网络状态。"

#: ../../intro/index.rst:140
msgid "Interfacing"
msgstr "接口"

#: ../../intro/index.rst:142
msgid "Default output to well-structured ASCII logs."
msgstr "默认输出到结构化的ASCII日志中。"

#: ../../intro/index.rst:144
msgid ""
"Alternative backends for ElasticSearch and DataSeries. Further database "
"interfaces in preparation."
msgstr "可选的后端有ElasticSearch和DataSeries。其它的数据库接口还在计划中。"

#: ../../intro/index.rst:147
msgid ""
"Real-time integration of external input into analyses. Live database input "
"in preparation."
msgstr "外部输入实时集成到分析中。数据库的实时输入还在计划中。"

#: ../../intro/index.rst:150
msgid ""
"External C library for exchanging Zeek events with external programs. "
"Comes with Perl, Python, and Ruby bindings."
msgstr "和外部程序交换Zeek事件的C函数库。实现了Perl、Python和Ruby的绑定。"

#: ../../intro/index.rst:153
msgid ""
"Ability to trigger arbitrary external processes from within the scripting "
"language."
msgstr "能够在脚本语言中触发任意的外部进程。"

#: ../../intro/index.rst:158
msgid "History"
msgstr "历史"

#: ../../intro/index.rst:166
msgid "Timeline of Zeek's History (click to enlarge)."
msgstr "Zeek的历史时间线（点击以放大）"

#: ../../intro/index.rst:168
msgid ""
"Zeek's history goes back much further than many people realize (and it "
"used to named \"Bro\", not \"Zeek\"). `Vern Paxson <http://www.icir.org/"
"vern>`_ designed and implemented the initial version more than two decades "
"ago. Vern began work on the code in 1995 as a researcher at the `Lawrence "
"Berkeley National Laboratory (LBNL) <http://www.lbl.gov>`_. Berkeley Lab "
"began operational deployment in 1996, and the USENIX Security Symposium "
"published the original Bro paper in 1998 (later refined in a subsequent "
"`journal publication <http://www.icir.org/vern/papers/bro-CN99.pdf>`_). In "
"2003, the `National Science Foundation (NSF) <http://www.nsf.gov>`_ began "
"supporting research and advanced development on Bro at the `International "
"Computer Science Institute (ICSI) <http://www.icsi.berkeley.edu>`_, where "
"Vern now leads the `Networking and Security group <http://www.icir.org>`_. "
"Over the years, a growing team of ICSI researchers and students kept "
"adding novel functionality , while LBNL continued its support with funding "
"from the `Department of Energy (DOE) <http://www.doe.gov>`_."
msgstr ""
"Zeek的历史比大多数人意识到的还要悠久（以前叫做“Bro”，不是“Zeek”）。`Vern "
"Paxson <http://www.icir.org/vern>`_ 于20年前设计和实现了最初的版本。Vern在"
"1995年开始编写代码，当时他还是`Lawrence Berkeley National Laboratory "
"(LBNL) <http://www.lbl.gov>`_ 的一个研究员。伯克利实验室在1996年开始了实际"
"的部署，然后USENIX Security Symposium杂志在1998年发表了Bro的最初的论文（后"
"来在2003年的`期刊论文 <http://www.icir.org/vern/papers/bro-CN99.pdf>`_中进"
"行了完善改进）。2003年，`National Science Foundation (NSF) <http://www.nsf."
"gov>`_ 开始支持`International Computer Science Institute (ICSI) <http://"
"www.icsi.berkeley.edu>`_ Bro的研究和开发，现在Vern正在领导ICSI下的"
"`Networking and Security 小组 <http://www.icir.org>`_。在过去的这些年里，一"
"个由ICSI研究者和学生组成的不断增长的团队不断为Zeek添加新的功能，而且LBNL仍"
"然在`Department of Energy (DOE) <http://www.doe.gov>`_的资助下继续支持。"

#: ../../intro/index.rst:187
msgid ""
"Much of Zeek's capabilities originate in academic research projects, with "
"results often published at top-tier conferences. However, the key to "
"Zeek's success was its ability to bridge the traditional gap between "
"academia and operations from early on, which provided the research with "
"crucial grounding to ensure that developed approaches stand up to the "
"challenges of the real world. Yet, with Zeek's operational user community "
"growing over time, the research-centric development model eventually "
"became a bottleneck to the system's evolution: research grants do not tend "
"to support the more mundane parts of software development and maintenance, "
"even though those prove crucial for the end-user experience. While Zeek's "
"capabilities always went beyond those of traditional systems, a successful "
"deployment used to require significant technical expertise, typically with "
"a large upfront investment in tackling Zeek's steep learning curve.  In "
"2010, NSF set out to address this gap by awarding ICSI a grant dedicated "
"solely to Zeek development out of its SDCI program. With that support in "
"place, the `National Center for Supercomputing Applications (NCSA) <http://"
"www.ncsa.illinois.edu>`_ joined the team as a core partner, and the "
"Project began to completely overhaul many of the user-visible parts of the "
"system for the 2.0 release. Since that version came out, Zeek has "
"experienced an tremendous growth in new deployments across a diverse range "
"of settings, and the Zeek team is now working to build on this success by "
"further advancing the system's capabilities to address the challenges of "
"future networks."
msgstr ""

#: ../../intro/index.rst:214
msgid "Architecture"
msgstr "架构"

#: ../../intro/index.rst:222
msgid "Zeek's internal architecture."
msgstr "Zeek的内部架构。"

#: ../../intro/index.rst:224
msgid ""
"Architecturally, Zeek is layered into two major components. Its *event "
"engine* (or *core*) reduces the incoming packet stream into a series of "
"higher-level *events*. These events reflect network activity in policy-"
"neutral terms, i.e., they describe *what* has been seen, but not *why*, or "
"whether it is significant. For example, every HTTP request on the wire "
"turns into a corresponding ``http_request`` event that carries with it the "
"involved IP addresses and ports, the URI being requested, and the HTTP "
"version in use. The event however does not convey any further "
"*interpretation*, e.g., of whether that URI corresponds to a known malware "
"site."
msgstr ""

#: ../../intro/index.rst:235
msgid ""
"Such semantics are instead derived by Zeek's second main component, the "
"*script interpreter*, which executes a set of *event handlers* written in "
"Zeek's custom scripting language. These scripts can express a site's "
"security policy, i.e., what actions to take when the monitor detects "
"different types of activity. More generally they can derive any desired "
"properties and statistics from the input traffic. Zeek's language comes "
"with extensive domain-specific types and support functionality; and, "
"crucially, allows scripts to maintain state over time, enabling them to "
"track and correlate the evolution of what they observe across connection "
"and host boundaries. Zeek scripts can generate real-time alerts and also "
"execute arbitrary external programs on demand, e.g., to trigger an active "
"response to an attack."
msgstr ""
