# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The Zeek Project
# This file is distributed under the same license as the Zeek package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zeek source\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-28 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../frameworks/input.rst:6
msgid "Input Framework"
msgstr ""

#: ../../frameworks/input.rst:10
msgid ""
"Zeek features a flexible input framework that allows users to import data"
" into Zeek. Data is either read into Zeek tables or converted to events "
"which can then be handled by scripts. This document gives an overview of "
"how to use the input framework with some examples. For more complex "
"scenarios it is worthwhile to take a look at the integration tests in "
"``testing/btest/scripts/base/frameworks/input/``."
msgstr ""

#: ../../frameworks/input.rst:19
msgid "Reading Data into Tables"
msgstr ""

#: ../../frameworks/input.rst:21
msgid ""
"Probably the most interesting use-case of the input framework is to read "
"data into a Zeek table."
msgstr ""

#: ../../frameworks/input.rst:24
msgid ""
"By default, the input framework reads the data in the same format as it "
"is written by the logging framework in Zeek - a tab-separated ASCII file."
msgstr ""

#: ../../frameworks/input.rst:28
msgid ""
"We will show the ways to read files into Zeek with a simple example. For "
"this example we assume that we want to import data from a blacklist that "
"contains server IP addresses as well as the timestamp and the reason for "
"the block."
msgstr ""

#: ../../frameworks/input.rst:33
msgid ""
"An example input file could look like this (note that all fields must be "
"tab-separated):"
msgstr ""

#: ../../frameworks/input.rst:43
msgid ""
"To read a file into a Zeek table, two record types have to be defined. "
"One contains the types and names of the columns that should constitute "
"the table keys and the second contains the types and names of the columns"
" that should constitute the table values."
msgstr ""

#: ../../frameworks/input.rst:48
msgid ""
"In our case, we want to be able to lookup IPs. Hence, our key record only"
" contains the server IP. All other elements should be stored as the table"
" content."
msgstr ""

#: ../../frameworks/input.rst:52
msgid "The two records are defined as:"
msgstr ""

#: ../../frameworks/input.rst:65
msgid ""
"Note that the names of the fields in the record definitions must "
"correspond to the column names listed in the '#fields' line of the log "
"file, in this case 'ip', 'timestamp', and 'reason'.  Also note that the "
"ordering of the columns does not matter, because each column is "
"identified by name."
msgstr ""

#: ../../frameworks/input.rst:70
msgid ""
"The log file is read into the table with a simple call of the "
":zeek:id:`Input::add_table` function:"
msgstr ""

#: ../../frameworks/input.rst:83
msgid ""
"With these three lines we first create an empty table that should contain"
" the blacklist data and then instruct the input framework to open an "
"input stream named ``blacklist`` to read the data into the table. The "
"third line removes the input stream again, because we do not need it any "
"more after the data has been read."
msgstr ""

#: ../../frameworks/input.rst:89
msgid ""
"Because some data files can - potentially - be rather big, the input "
"framework works asynchronously. A new thread is created for each new "
"input stream. This thread opens the input data file, converts the data "
"into a Zeek format and sends it back to the main Zeek thread."
msgstr ""

#: ../../frameworks/input.rst:94
msgid ""
"Because of this, the data is not immediately accessible. Depending on the"
" size of the data source it might take from a few milliseconds up to a "
"few seconds until all data is present in the table. Please note that this"
" means that when Zeek is running without an input source or on very short"
" captured files, it might terminate before the data is present in the "
"table (because Zeek already handled all packets before the import thread "
"finished)."
msgstr ""

#: ../../frameworks/input.rst:101
msgid ""
"Subsequent calls to an input source are queued until the previous action "
"has been completed. Because of this, it is, for example, possible to call"
" ``add_table`` and ``remove`` in two subsequent lines: the ``remove`` "
"action will remain queued until the first read has been completed."
msgstr ""

#: ../../frameworks/input.rst:106
msgid ""
"Once the input framework finishes reading from a data source, it fires "
"the :zeek:id:`Input::end_of_data` event. Once this event has been "
"received all data from the input file is available in the table."
msgstr ""

#: ../../frameworks/input.rst:117
msgid ""
"The table can be used while the data is still being read - it just might "
"not contain all lines from the input file before the event has fired. "
"After the table has been populated it can be used like any other Zeek "
"table and blacklist entries can easily be tested:"
msgstr ""

#: ../../frameworks/input.rst:128
msgid "Sets instead of tables"
msgstr ""

#: ../../frameworks/input.rst:130
msgid ""
"For some use cases the key/value notion that drives tabular data does not"
" apply, for example when the main purpose of the data is to test for "
"membership in a set. The input framework supports this approach by using "
"sets as the destination data type, and omitting ``$val`` in "
":zeek:id:`Input::add_table`:"
msgstr ""

#: ../../frameworks/input.rst:152
msgid "Re-reading and streaming data"
msgstr ""

#: ../../frameworks/input.rst:154
msgid ""
"For many data sources, like for many blacklists, the source data is "
"continually changing. For these cases, the Zeek input framework supports "
"several ways to deal with changing data files."
msgstr ""

#: ../../frameworks/input.rst:158
msgid ""
"The first, very basic method is an explicit refresh of an input stream. "
"When an input stream is open (this means it has not yet been removed by a"
" call to :zeek:id:`Input::remove`), the function "
":zeek:id:`Input::force_update` can be called.  This will trigger a "
"complete refresh of the table; any changed elements from the file will be"
" updated.  After the update is finished the :zeek:id:`Input::end_of_data`"
" event will be raised."
msgstr ""

#: ../../frameworks/input.rst:165
msgid "In our example the call would look like:"
msgstr ""

#: ../../frameworks/input.rst:171
msgid ""
"Alternatively, the input framework can automatically refresh the table "
"contents when it detects a change to the input file.  To use this "
"feature, you need to specify a non-default read mode by setting the "
"``mode`` option of the :zeek:id:`Input::add_table` call.  Valid values "
"are ``Input::MANUAL`` (the default), ``Input::REREAD`` and "
"``Input::STREAM``.  For example, setting the value of the ``mode`` option"
" in the previous example would look like this:"
msgstr ""

#: ../../frameworks/input.rst:185
msgid ""
"When using the reread mode (i.e., ``$mode=Input::REREAD``), Zeek "
"continually checks if the input file has been changed. If the file has "
"been changed, it is re-read and the data in the Zeek table is updated to "
"reflect the current state.  Each time a change has been detected and all "
"the new data has been read into the table, the ``end_of_data`` event is "
"raised."
msgstr ""

#: ../../frameworks/input.rst:191
msgid ""
"When using the streaming mode (i.e., ``$mode=Input::STREAM``), Zeek "
"assumes that the source data file is an append-only file to which new "
"data is continually appended. Zeek continually checks for new data at the"
" end of the file and will add the new data to the table.  If newer lines "
"in the file have the same index as previous lines, they will overwrite "
"the values in the output table.  Because of the nature of streaming reads"
" (data is continually added to the table), the ``end_of_data`` event is "
"never raised when using streaming reads."
msgstr ""

#: ../../frameworks/input.rst:202
msgid "Receiving change events"
msgstr ""

#: ../../frameworks/input.rst:204
msgid ""
"When re-reading files, it might be interesting to know exactly which "
"lines in the source files have changed."
msgstr ""

#: ../../frameworks/input.rst:207
msgid ""
"For this reason, the input framework can raise an event each time when a "
"data item is added to, removed from, or changed in a table."
msgstr ""

#: ../../frameworks/input.rst:210
msgid ""
"The event definition looks like this (note that you can change the name "
"of this event in your own Zeek script):"
msgstr ""

#: ../../frameworks/input.rst:221
msgid "The event must be specified in ``$ev`` in the ``add_table`` call:"
msgstr ""

#: ../../frameworks/input.rst:229
msgid ""
"The ``description`` argument of the event contains the arguments that "
"were originally supplied to the add_table call.  Hence, the name of the "
"stream can, for example, be accessed with ``description$name``. The "
"``tpe`` argument of the event is an enum containing the type of the "
"change that occurred."
msgstr ""

#: ../../frameworks/input.rst:234
msgid ""
"If a line that was not previously present in the table has been added, "
"then the value of ``tpe`` will be ``Input::EVENT_NEW``. In this case "
"``left`` contains the index of the added table entry and ``right`` "
"contains the values of the added entry."
msgstr ""

#: ../../frameworks/input.rst:239
msgid ""
"If a table entry that already was present is altered during the re-"
"reading or streaming read of a file, then the value of ``tpe`` will be "
"``Input::EVENT_CHANGED``. In this case ``left`` contains the index of the"
" changed table entry and ``right`` contains the values of the entry "
"before the change. The reason for this is that the table already has been"
" updated when the event is raised. The current value in the table can be "
"ascertained by looking up the current table value. Hence it is possible "
"to compare the new and the old values of the table."
msgstr ""

#: ../../frameworks/input.rst:248
msgid ""
"If a table element is removed because it was no longer present during a "
"re-read, then the value of ``tpe`` will be ``Input::EVENT_REMOVED``.  In "
"this case ``left`` contains the index and ``right`` the values of the "
"removed element."
msgstr ""

#: ../../frameworks/input.rst:255
msgid "Filtering data during import"
msgstr ""

#: ../../frameworks/input.rst:257
msgid ""
"The input framework also allows a user to filter the data during the "
"import. To this end, predicate functions are used. A predicate function "
"is called before a new element is added/changed/removed from a table. The"
" predicate can either accept or veto the change by returning true for an "
"accepted change and false for a rejected change. Furthermore, it can "
"alter the data before it is written to the table."
msgstr ""

#: ../../frameworks/input.rst:264
msgid ""
"The following example filter will reject adding entries to the table when"
" they were generated over a month ago. It will accept all changes and all"
" removals of values that are already present in the table."
msgstr ""

#: ../../frameworks/input.rst:280
msgid ""
"To change elements while they are being imported, the predicate function "
"can manipulate ``left`` and ``right``. Note that predicate functions are "
"called before the change is committed to the table. Hence, when a table "
"element is changed (``typ`` is ``Input::EVENT_CHANGED``), ``left`` and "
"``right`` contain the new values, but the destination (``blacklist`` in "
"our example) still contains the old values. This allows predicate "
"functions to examine the changes between the old and the new version "
"before deciding if they should be allowed."
msgstr ""

#: ../../frameworks/input.rst:291
msgid "Broken input data"
msgstr ""

#: ../../frameworks/input.rst:293
msgid ""
"The input framework notifies you of problems during data ingestion in two"
" ways. First, reporter messages, ending up in ``reporter.log``, indicate "
"the type of problem and the file in which the problem occurred::"
msgstr ""

#: ../../frameworks/input.rst:301
msgid ""
"Second, the :zeek:type:`Input::TableDescription` and "
":zeek:type:`Input::EventDescription` records feature an ``$error_ev`` "
"member to handle events indicating the same message and severity levels "
"as shown above. The use of these events mirrors that of change events."
msgstr ""

#: ../../frameworks/input.rst:306
msgid ""
"For both approaches, the framework suppresses repeated messages regarding"
" the same file, so mistakes in large data files do not trigger a message "
"flood."
msgstr ""

#: ../../frameworks/input.rst:310
msgid ""
"Finally, the ASCII reader allows coarse control over the robustness in "
"case of problems during data ingestion. Concretely, the "
":zeek:id:`InputAscii::fail_on_invalid_lines` and "
":zeek:id:`InputAscii::fail_on_file_problem` flags indicate whether "
"problems should merely trigger warnings or lead to processing failure. "
"Both default to warnings."
msgstr ""

#: ../../frameworks/input.rst:319
msgid "Different readers"
msgstr ""

#: ../../frameworks/input.rst:321
msgid ""
"The input framework supports different kinds of readers for different "
"kinds of source data files. At the moment, the default reader reads ASCII"
" files formatted in the Zeek log file format (tab-separated values with a"
" \"#fields\" header line).  Several other readers are included in Zeek."
msgstr ""

#: ../../frameworks/input.rst:326
msgid ""
"The raw reader reads a file that is split by a specified record separator"
" (newline by default). The contents are returned line-by-line as strings;"
" it can, for example, be used to read configuration files and the like "
"and is probably only useful in the event mode and not for reading data to"
" tables."
msgstr ""

#: ../../frameworks/input.rst:332
msgid ""
"The binary reader is intended to be used with file analysis input streams"
" (and is the default type of reader for those streams)."
msgstr ""

#: ../../frameworks/input.rst:335
msgid ""
"The benchmark reader is being used to optimize the speed of the input "
"framework. It can generate arbitrary amounts of semi-random data in all "
"Zeek data types supported by the input framework."
msgstr ""

#: ../../frameworks/input.rst:340
msgid ""
"Currently, Zeek supports the following readers in addition to the "
"aforementioned ones:"
msgstr ""

#: ../../frameworks/input.rst:350
msgid "Reading Data to Events"
msgstr ""

#: ../../frameworks/input.rst:352
msgid ""
"The second supported mode of the input framework is reading data to Zeek "
"events instead of reading them to a table."
msgstr ""

#: ../../frameworks/input.rst:355
msgid ""
"Event streams work similarly to table streams that were already discussed"
" in much detail. To read the blacklist of the previous example into an "
"event stream, the :zeek:id:`Input::add_event` function is used. For "
"example:"
msgstr ""

#: ../../frameworks/input.rst:379
msgid ""
"The main difference in the declaration of the event stream is, that an "
"event stream needs no separate index and value declarations -- instead, "
"all source data types are provided in a single record definition."
msgstr ""

#: ../../frameworks/input.rst:383
msgid ""
"Another difference to table streams is, that event streams do not track "
"changes like table streams. Hence, every change will raise a event of "
"type ``Input::EVENT_NEW``, with the new line content. No event will be "
"raised when a line is removed."
msgstr ""

#: ../../frameworks/input.rst:387
msgid ""
"Note that, due to this, reading data to events has a lower overhead than "
"reading data into sets/tables. When reading to events, the input "
"framework has to keep only minimal internal state, whereas when reading "
"to tables the input framework has to keep state about every input line to"
" determine changes."
msgstr ""

#: ../../frameworks/input.rst:392
msgid ""
"Apart from this, event streams work exactly the same as table streams and"
" support most of the options that are also supported for table streams."
msgstr ""

