# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The Zeek Project
# This file is distributed under the same license as the Zeek package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zeek source\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-28 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../frameworks/logging-input-sqlite.rst:4
msgid "Logging To and Reading From SQLite Databases"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:8
msgid ""
"Zeek features a SQLite logging writer as well as a SQLite input reader. "
"SQLite is a simple, file-based, widely used SQL database system. Using "
"SQLite allows Zeek to write and access data in a format that is easy to "
"use in interchange with other applications. Due to the transactional "
"nature of SQLite, databases can be used by several applications "
"simultaneously. Hence, they can, for example, be used to make data that "
"changes regularly available to Zeek on a continuing basis."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:18
msgid "Warning"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:20
msgid ""
"In contrast to the ASCII reader and writer, the SQLite plugins have not "
"yet seen extensive use in production environments. While we are not aware"
" of any issues with them, we urge to caution when using them in "
"production environments. There could be lingering issues which only occur"
" when the plugins are used with high amounts of data or in high-load "
"environments."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:28
msgid "Logging Data into SQLite Databases"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:30
msgid ""
"Logging support for SQLite is available in all Zeek installations. There "
"is no need to load any additional scripts or for any compile-time "
"configurations."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:33
msgid ""
"Sending data from existing logging streams to SQLite is rather "
"straightforward. You have to define a filter which specifies SQLite as "
"the writer."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:36
msgid "The following example code adds SQLite as a filter for the connection log:"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:38
msgid "sqlite-conn-filter.zeek"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:44
msgid ""
"Zeek will create the database file ``/var/db/conn.sqlite``, if it does "
"not already exist.  It will also create a table with the name ``conn`` "
"(if it does not exist) and start appending connection information to the "
"table."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:48
msgid ""
"At the moment, SQLite databases are not rotated the same way ASCII log-"
"files are. You have to take care to create them in an adequate location."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:51
msgid ""
"If you examine the resulting SQLite database, the schema will contain the"
" same fields that are present in the ASCII log files::"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:67
msgid ""
"Note that the ASCII ``conn.log`` will still be created. To prevent this "
"file from being created, you can remove the default filter:"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:75
msgid ""
"To create a custom SQLite log file, you have to create a new log stream "
"that contains just the information you want to commit to the database. "
"Please refer to the :ref:`framework-logging` documentation on how to "
"create custom log streams."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:81
msgid "Reading Data from SQLite Databases"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:83
msgid ""
"Like logging support, support for reading data from SQLite databases is "
"built into Zeek without any extra configuration needed."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:86
msgid ""
"Just as with the text-based input readers (please refer to the :ref"
":`framework-input` documentation for them and for basic information on "
"how to use the input framework), the SQLite reader can be used to read "
"data - in this case the result of SQL queries - into tables or into "
"events."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:93
msgid "Reading Data into Tables"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:95
msgid ""
"To read data from a SQLite database, we first have to provide Zeek with "
"the information, how the resulting data will be structured. For this "
"example, we expect that we have a SQLite database, which contains host IP"
" addresses and the user accounts that are allowed to log into a specific "
"machine."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:101
#: ../../frameworks/logging-input-sqlite.rst:140
msgid "The SQLite commands to create the schema are as follows::"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:111
msgid ""
"After creating a file called ``hosts.sqlite`` with this content, we can "
"read the resulting table into Zeek:"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:114
msgid "sqlite-read-table.zeek"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:120
msgid ""
"Afterwards, that table can be used to check logins into hosts against the"
" available userlist."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:124
msgid "Turning Data into Events"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:126
msgid ""
"The second mode is to use the SQLite reader to output the input data as "
"events. Typically there are two reasons to do this. First, when the "
"structure of the input data is too complicated for a direct table import."
" In this case, the data can be read into an event which can then create "
"the necessary data structures in Zeek in scriptland."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:132
msgid ""
"The second reason is, that the dataset is too big to hold it in memory. "
"In this case, the checks can be performed on-demand, when Zeek encounters"
" a situation where it needs additional information."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:136
msgid ""
"An example for this would be an internal huge database with malware "
"hashes. Live database queries could be used to check the sporadically "
"happening downloads against the database."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:157
msgid ""
"The following code uses the file-analysis framework to get the sha1 "
"hashes of files that are transmitted over the network. For each hash, a "
"SQL-query is run against SQLite. If the query returns with a result, we "
"had a hit against our malware-database and output the matching hash."
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:162
msgid "sqlite-read-events.zeek"
msgstr ""

#: ../../frameworks/logging-input-sqlite.rst:168
msgid ""
"If you run this script against the trace in "
"``testing/btest/Traces/ftp/ipv4.trace``, you will get one hit."
msgstr ""

