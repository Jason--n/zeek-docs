# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The Zeek Project
# This file is distributed under the same license as the Zeek package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zeek source\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-28 21:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../frameworks/notice.rst:5
msgid "Notice Framework"
msgstr ""

#: ../../frameworks/notice.rst:9
msgid ""
"One of the easiest ways to customize Zeek is writing a local notice "
"policy. Zeek can detect a large number of potentially interesting "
"situations, and the notice policy hook which of them the user wants to be"
" acted upon in some manner. In particular, the notice policy can specify "
"actions to be taken, such as sending an email or compiling regular alarm "
"emails.  This page gives an introduction into writing such a notice "
"policy."
msgstr ""

#: ../../frameworks/notice.rst:18
msgid "Overview"
msgstr ""

#: ../../frameworks/notice.rst:20
msgid ""
"Let's start with a little bit of background on Zeek's philosophy on "
"reporting things. Zeek ships with a large number of policy scripts which "
"perform a wide variety of analyses. Most of these scripts monitor for "
"activity which might be of interest for the user. However, none of these "
"scripts determines the importance of what it finds itself. Instead, the "
"scripts only flag situations as *potentially* interesting, leaving it to "
"the local configuration to define which of them are in fact actionable. "
"This decoupling of detection and reporting allows Zeek to address the "
"different needs that sites have. Definitions of what constitutes an "
"attack or even a compromise differ quite a bit between environments, and "
"activity deemed malicious at one site might be fully acceptable at "
"another."
msgstr ""

#: ../../frameworks/notice.rst:32
msgid ""
"Whenever one of Zeek's analysis scripts sees something potentially "
"interesting it flags the situation by calling the :zeek:see:`NOTICE` "
"function and giving it a single :zeek:see:`Notice::Info` record. A Notice"
" has a :zeek:see:`Notice::Type`, which reflects the kind of activity that"
" has been seen, and it is usually also augmented with further context "
"about the situation."
msgstr ""

#: ../../frameworks/notice.rst:39
msgid ""
"More information about raising notices can be found in the `Raising "
"Notices`_ section."
msgstr ""

#: ../../frameworks/notice.rst:42
msgid ""
"Once a notice is raised, it can have any number of actions applied to it "
"by writing :zeek:see:`Notice::policy` hooks which is described in the "
"`Notice Policy`_ section below. Such actions can be to send a mail to the"
" configured address(es) or to simply ignore the notice. Currently, the "
"following actions are defined:"
msgstr ""

#: ../../frameworks/notice.rst:52
msgid "Action"
msgstr ""

#: ../../frameworks/notice.rst:53 ../../frameworks/notice.rst:153
#: ../../frameworks/notice.rst:210
msgid "Description"
msgstr ""

#: ../../frameworks/notice.rst:55
msgid "Notice::ACTION_LOG"
msgstr ""

#: ../../frameworks/notice.rst:56
msgid "Write the notice to the :zeek:see:`Notice::LOG` logging stream."
msgstr ""

#: ../../frameworks/notice.rst:58
msgid "Notice::ACTION_ALARM"
msgstr ""

#: ../../frameworks/notice.rst:59
msgid ""
"Log into the :zeek:see:`Notice::ALARM_LOG` stream which will rotate "
"hourly and email the contents to the email address or addresses defined "
"in the :zeek:see:`Notice::mail_dest` variable."
msgstr ""

#: ../../frameworks/notice.rst:63
msgid "Notice::ACTION_EMAIL"
msgstr ""

#: ../../frameworks/notice.rst:64
msgid ""
"Send the notice in an email to the email address or addresses given in "
"the :zeek:see:`Notice::mail_dest` variable."
msgstr ""

#: ../../frameworks/notice.rst:67
msgid "Notice::ACTION_PAGE"
msgstr ""

#: ../../frameworks/notice.rst:68
msgid ""
"Send an email to the email address or addresses given in the "
":zeek:see:`Notice::mail_page_dest` variable."
msgstr ""

#: ../../frameworks/notice.rst:71
msgid ""
"How these notice actions are applied to notices is discussed in the "
"`Notice Policy`_ and `Notice Policy Shortcuts`_ sections."
msgstr ""

#: ../../frameworks/notice.rst:75
msgid "Processing Notices"
msgstr ""

#: ../../frameworks/notice.rst:78
msgid "Notice Policy"
msgstr ""

#: ../../frameworks/notice.rst:80
msgid ""
"The hook :zeek:see:`Notice::policy` provides the mechanism for applying "
"actions and generally modifying the notice before it's sent onward to the"
" action plugins.  Hooks can be thought of as multi-bodied functions and "
"using them looks very similar to handling events.  The difference is that"
" they don't go through the event queue like events.  Users can alter "
"notice processing by directly modifying fields in the "
":zeek:see:`Notice::Info` record given as the argument to the hook."
msgstr ""

#: ../../frameworks/notice.rst:88
msgid ""
"Here's a simple example which tells Zeek to send an email for all notices"
" of type :zeek:see:`SSH::Password_Guessing` if the guesser attempted to "
"log in to the server at 192.168.56.103:"
msgstr ""

#: ../../frameworks/notice.rst:92
msgid "notice_ssh_guesser.zeek"
msgstr ""

#: ../../frameworks/notice.rst:115
msgid ""
"Keep in mind that the semantics of the :zeek:see:`SSH::Password_Guessing`"
" notice are such that it is only raised when Zeek heuristically detects a"
" failed login."
msgstr ""

#: ../../frameworks/notice.rst:119
msgid ""
"Hooks can also have priorities applied to order their execution like "
"events with a default priority of 0.  Greater values are executed first."
"  Setting a hook body to run before default hook bodies might look like "
"this:"
msgstr ""

#: ../../frameworks/notice.rst:130
msgid ""
"Hooks can also abort later hook bodies with the ``break`` keyword. This "
"is primarily useful if one wants to completely preempt processing by "
"lower priority :zeek:see:`Notice::policy` hooks."
msgstr ""

#: ../../frameworks/notice.rst:135
msgid "Notice Policy Shortcuts"
msgstr ""

#: ../../frameworks/notice.rst:137
msgid ""
"Although the notice framework provides a great deal of flexibility and "
"configurability there are many times that the full expressiveness isn't "
"needed and actually becomes a hindrance to achieving results. The "
"framework provides a default :zeek:see:`Notice::policy` hook body as a "
"way of giving users the shortcuts to easily apply many common actions to "
"notices."
msgstr ""

#: ../../frameworks/notice.rst:143
msgid ""
"These are implemented as sets and tables indexed with a "
":zeek:see:`Notice::Type` enum value. The following table shows and "
"describes all of the variables available for shortcut configuration of "
"the notice framework."
msgstr ""

#: ../../frameworks/notice.rst:152
msgid "Variable name"
msgstr ""

#: ../../frameworks/notice.rst:155
msgid ":zeek:see:`Notice::ignored_types`"
msgstr ""

#: ../../frameworks/notice.rst:156
msgid ""
"Adding a :zeek:see:`Notice::Type` to this set results in the notice being"
" ignored. It won't have any other action applied to it, not even "
":zeek:see:`Notice::ACTION_LOG`."
msgstr ""

#: ../../frameworks/notice.rst:160
msgid ":zeek:see:`Notice::emailed_types`"
msgstr ""

#: ../../frameworks/notice.rst:161
msgid ""
"Adding a :zeek:see:`Notice::Type` to this set results in "
":zeek:see:`Notice::ACTION_EMAIL` being applied to the notices of that "
"type."
msgstr ""

#: ../../frameworks/notice.rst:165
msgid ":zeek:see:`Notice::alarmed_types`"
msgstr ""

#: ../../frameworks/notice.rst:166
msgid ""
"Adding a :zeek:see:`Notice::Type` to this set results in "
":zeek:see:`Notice::ACTION_ALARM` being applied to the notices of that "
"type."
msgstr ""

#: ../../frameworks/notice.rst:170
msgid ":zeek:see:`Notice::not_suppressed_types`"
msgstr ""

#: ../../frameworks/notice.rst:171
msgid ""
"Adding a :zeek:see:`Notice::Type` to this set results in that notice no "
"longer undergoing the normal notice suppression that would take place. Be"
" careful when using this in production it could result in a dramatic "
"increase in the number of notices being processed."
msgstr ""

#: ../../frameworks/notice.rst:177
msgid ":zeek:see:`Notice::type_suppression_intervals`"
msgstr ""

#: ../../frameworks/notice.rst:178
msgid ""
"This is a table indexed on :zeek:see:`Notice::Type` and yielding an "
"interval.  It can be used as an easy way to extend the default "
"suppression interval for an entire :zeek:see:`Notice::Type` without "
"having to create a whole :zeek:see:`Notice::policy` entry and setting the"
" ``$suppress_for`` field."
msgstr ""

#: ../../frameworks/notice.rst:185
msgid "Raising Notices"
msgstr ""

#: ../../frameworks/notice.rst:187
msgid ""
"A script should raise a notice for any occurrence that a user may want to"
" be notified about or take action on. For example, whenever the base SSH "
"analysis scripts sees enough failed logins to a given host, it raises a "
"notice of the type :zeek:see:`SSH::Password_Guessing`.  The code in the "
"base SSH analysis script which raises the notice looks like this:"
msgstr ""

#: ../../frameworks/notice.rst:200
msgid ""
":zeek:see:`NOTICE` is a normal function in the global namespace which "
"wraps a function within the ``Notice`` namespace. It takes a single "
"argument of the :zeek:see:`Notice::Info` record type. The most common "
"fields used when raising notices are described in the following table:"
msgstr ""

#: ../../frameworks/notice.rst:209
msgid "Field name"
msgstr ""

#: ../../frameworks/notice.rst:212
msgid "``$note``"
msgstr ""

#: ../../frameworks/notice.rst:213
msgid ""
"This field is required and is an enum value which represents the notice "
"type."
msgstr ""

#: ../../frameworks/notice.rst:216
msgid "``$msg``"
msgstr ""

#: ../../frameworks/notice.rst:217
msgid ""
"This is a human readable message which is meant to provide more "
"information about this particular instance of the notice type."
msgstr ""

#: ../../frameworks/notice.rst:220
msgid "``$sub``"
msgstr ""

#: ../../frameworks/notice.rst:221
msgid ""
"This is a sub-message meant for human readability but will frequently "
"also be used to contain data meant to be matched with the "
"``Notice::policy``."
msgstr ""

#: ../../frameworks/notice.rst:225
msgid "``$conn``"
msgstr ""

#: ../../frameworks/notice.rst:226
msgid ""
"If a connection record is available when the notice is being raised and "
"the notice represents some attribute of the connection, then the "
"connection record can be given here. Other fields such as ``$id`` and "
"``$src`` will automatically be populated from this value."
msgstr ""

#: ../../frameworks/notice.rst:231
msgid "``$id``"
msgstr ""

#: ../../frameworks/notice.rst:232
msgid ""
"If a conn_id record is available when the notice is being raised and the "
"notice represents some attribute of the connection, then the connection "
"can be given here. Other fields such as ``$src`` will automatically be "
"populated from this value."
msgstr ""

#: ../../frameworks/notice.rst:237
msgid "``$src``"
msgstr ""

#: ../../frameworks/notice.rst:238
msgid ""
"If the notice represents an attribute of a single host then it's possible"
" that only this field should be filled out to represent the host that is "
"being \"noticed\"."
msgstr ""

#: ../../frameworks/notice.rst:242
msgid "``$n``"
msgstr ""

#: ../../frameworks/notice.rst:243
msgid ""
"This normally represents a number if the notice has to do with some "
"number. It's most frequently used for numeric tests in the "
"``Notice::policy`` for making policy decisions."
msgstr ""

#: ../../frameworks/notice.rst:247
msgid "``$identifier``"
msgstr ""

#: ../../frameworks/notice.rst:248
msgid ""
"This represents a unique identifier for this notice. This field is "
"described in more detail in the `Automated Suppression`_ section."
msgstr ""

#: ../../frameworks/notice.rst:251
msgid "``$suppress_for``"
msgstr ""

#: ../../frameworks/notice.rst:252
msgid ""
"This field can be set if there is a natural suppression interval for the "
"notice that may be different than the default value. The value set to "
"this field can also be modified by a user's :zeek:see:`Notice::policy` so"
" the value is not set permanently and unchangeably."
msgstr ""

#: ../../frameworks/notice.rst:258
msgid ""
"When writing Zeek scripts which raise notices, some thought should be "
"given to what the notice represents and what data should be provided to "
"give a consumer of the notice the best information about the notice. If "
"the notice is representative of many connections and is an attribute of a"
" host (e.g. a scanning host) it probably makes most sense to fill out the"
" ``$src`` field and not give a connection or conn_id. If a notice is "
"representative of a connection attribute (e.g. an apparent SSH login) "
"then it makes sense to fill out either ``$conn`` or ``$id`` based on the "
"data that is available when the notice is raised. Using care when "
"inserting data into a notice will make later analysis easier when only "
"the data to fully represent the occurrence that raised the notice is "
"available. If complete connection information is available when an SSL "
"server certificate is expiring, the logs will be very confusing because "
"the connection that the certificate was detected on is a side topic to "
"the fact that an expired certificate was detected. It's possible in many "
"cases that two or more separate notices may need to be generated. As an "
"example, one could be for the detection of the expired SSL certificate "
"and another could be for if the client decided to go ahead with the "
"connection neglecting the expired certificate."
msgstr ""

#: ../../frameworks/notice.rst:278
msgid "Automated Suppression"
msgstr ""

#: ../../frameworks/notice.rst:280
msgid ""
"The notice framework supports suppression for notices if the author of "
"the script that is generating the notice has indicated to the notice "
"framework how to identify notices that are intrinsically the same. "
"Identification of these \"intrinsically duplicate\" notices is "
"implemented with an optional field in :zeek:see:`Notice::Info` records "
"named ``$identifier`` which is a simple string. If the ``$identifier`` "
"and ``$note`` fields are the same for two notices, the notice framework "
"actually considers them to be the same thing and can use that information"
" to suppress duplicates for a configurable period of time."
msgstr ""

#: ../../frameworks/notice.rst:291
msgid ""
"If the ``$identifier`` is left out of a notice, no notice suppression "
"takes place due to the framework's inability to identify duplicates. This"
" could be completely legitimate usage if no notices could ever be "
"considered to be duplicates."
msgstr ""

#: ../../frameworks/notice.rst:296
msgid ""
"The ``$identifier`` field is typically comprised of several pieces of "
"data related to the notice that when combined represent a unique instance"
" of that notice. Here is an example of the script "
":doc:`/scripts/policy/protocols/ssl/validate-certs.zeek` raising a notice"
" for session negotiations where the certificate or certificate chain did "
"not validate successfully against the available certificate authority "
"certificates."
msgstr ""

#: ../../frameworks/notice.rst:312
msgid ""
"In the above example you can see that the ``$identifier`` field contains "
"a string that is built from the responder IP address and port, the "
"validation status message, and the MD5 sum of the server certificate. "
"Those fields in particular are chosen because different SSL certificates "
"could be seen on any port of a host, certificates could fail validation "
"for different reasons, and multiple server certificates could be used on "
"that combination of IP address and port with the ``server_name`` SSL "
"extension (explaining the addition of the MD5 sum of the certificate). "
"The result is that if a certificate fails validation and all four pieces "
"of data match (IP address, port, validation status, and certificate hash)"
" that particular notice won't be raised again for the default suppression"
" period."
msgstr ""

#: ../../frameworks/notice.rst:324
msgid ""
"Setting the ``$identifier`` field is left to those raising notices "
"because it's assumed that the script author who is raising the notice "
"understands the full problem set and edge cases of the notice which may "
"not be readily apparent to users. If users don't want the suppression to "
"take place or simply want a different interval, they can set a notice's "
"suppression interval to ``0secs`` or delete the value from the "
"``$identifier`` field in a :zeek:see:`Notice::policy` hook."
msgstr ""

#: ../../frameworks/notice.rst:334
msgid "Extending Notice Framework"
msgstr ""

#: ../../frameworks/notice.rst:336
msgid ""
"There are a couple of mechanism currently for extending the notice "
"framework and adding new capability."
msgstr ""

#: ../../frameworks/notice.rst:340
msgid "Extending Notice Emails"
msgstr ""

#: ../../frameworks/notice.rst:342
msgid ""
"If there is extra information that you would like to add to emails, that "
"is possible to add by writing :zeek:see:`Notice::policy` hooks."
msgstr ""

#: ../../frameworks/notice.rst:345
msgid ""
"There is a field in the :zeek:see:`Notice::Info` record named "
"``$email_body_sections`` which will be included verbatim when email is "
"being sent. An example of including some information from an HTTP request"
" is included below."
msgstr ""

#: ../../frameworks/notice.rst:360
msgid "Cluster Considerations"
msgstr ""

#: ../../frameworks/notice.rst:362
msgid ""
"When running Zeek in a cluster, most of the information above stays the "
"same. Notices are generated, the :zeek:see:`Notice::policy` hook is "
"evaluated, and any actions are run on the node which generated the notice"
" (most often a worker node). Of note to users/developers of Zeek is that "
"any files or access needed to run the notice actions must be available to"
" the respective node(s)."
msgstr ""

#: ../../frameworks/notice.rst:369
msgid ""
"The role of the manager is to receive and distribute notice suppression "
"information, so that duplicate notices do not get generated. Bear in mind"
" that there is some amount of latency intrinsic in this synchronization, "
"so it's possible that rapidly-generating notices will be repeated (and in"
" this case, any actions would be executed multiple times, once by each "
"notice-generating worker)."
msgstr ""

